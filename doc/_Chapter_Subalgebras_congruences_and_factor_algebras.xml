<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_Subalgebras_congruences_and_factor_algebras">
<Heading>Subalgebras, congruences and factor algebras</Heading>

<Section Label="Chapter_Subalgebras_congruences_and_factor_algebras_Section_Congruences">
<Heading>Congruences</Heading>

 <P/>Let <Math>A</Math> be an algebra in a variety <Math>V</Math>. Then <Math>\sim</Math> is a <Index>congruence</Index><Emph>congruence</Emph>
 on <Math>A</Math> if it is an equivalence relation on <Math>A</Math> such that 
 for every operation <Math>f</Math> of arrity <Math>m</Math> in the signature of <Math>V</Math>,
 we have <Math>f(x_1,\dots,x_m)\sim f(y_1,\dots,y_m)</Math> whenever <Math>x_1,\dots,x_m,y_1,\dots,y_m\in A</Math>
 satisfy <Math>x_1\sim y_1</Math>, <Math>\dots</Math>, <Math>x_m\sim y_m</Math>. If <Math>V</Math> is the variety of all right quasigroups
 (resp. quasigroups, loops), we speak of a <Index>right quasigroup congruence</Index>
 <Emph>right quasigroup congruence</Emph> (resp. <Index>quasigroup congruence</Index><Emph>quasigroup congruence</Emph>,
 <Index>loop congruence</Index><Emph>loop congruence</Emph>).
 <P/>It turns out that an equivalence relation <Math>\sim</Math> on a finite right quasigroup (resp. quasigroup, loop)
 is a right quasigroup (resp. quasigroup, loop) congruence
 iff for every <Math>x,y,u\in Q</Math> with <Math>x\sim y</Math> we have <Math>xu\sim yu</Math> and <Math>ux\sim uy</Math>.
 Therefore, an equivalence relation <Math>\sim</Math> on a finite loop (quasigroup, right quasigroup) is a
 loop (quasigroup, right quasigroup) congruence iff it is a groupoid congruence.
 <P/>In &GAP;, equivalence relations on  <Math>A</Math> are represented as functions <Math>f:A\to A</Math>,
 where <Math>a,b\in A</Math> are related iff <Math>f(a)=b</Math>. Since equivalence relations are in one-to-one
 correspondence with partitions, the &GAP; function <Code>EquivalenceRelationByPartition</Code> is
 particularly convenient, as illustrated by the following example:
<Log><![CDATA[
gap> G := SymmetricGroup( 3 );;
gap> C := EquivalenceRelationByPartition( G, [[(),(1,2,3),(1,3,2)],[(1,2),(1,3),(2,3)]] );
<equivalence relation on SymmetricGroup( [ 1 .. 3 ] ) >
gap> Source( C );
Sym( [ 1 .. 3 ] )
gap> EquivalenceClasses( C );
[ {()}, {(1,2)} ]
gap> Elements( last[1] );
[ (), (1,2,3), (1,3,2) ]
]]></Log>


<ManSection Label="AutoDoc_generated_group1">
<Heading>Checking right quasigroup congruences</Heading>
  <Oper Arg="C" Name="IsRightQuasigroupCongruence" Label="for IsEquivalenceRelation"/>
  <Oper Arg="C" Name="IsQuasigroupCongruence" Label="for IsEquivalenceRelation"/>
  <Oper Arg="C" Name="IsLoopCongruence" Label="for IsEquivalenceRelation"/>
 <Returns><Code>true</Code> if <Code>C</Code> is a right quasigroup (resp. quasigroup, loop) congruence  on the right quasigroup (resp. quasigroup, loop) <Code>Source( C )</Code>, else returns <Code>false</Code>.
  Note that <Code>false</Code> is returned when a stronger algebra congruence is tested
  on a weaker algebra, for instance, if <Code>IsLoopCongruence( C )</Code> is tested with
  <Code>Source( C )</Code> that is not a declared loop.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<ManSection Label="AutoDoc_generated_group2">
<Heading>All congruences</Heading>
  <Oper Arg="Q" Name="AllRightQuasigroupCongruences" Label="for IsRightQuasigroup"/>
  <Oper Arg="Q" Name="AllQuasigroupCongruences" Label="for IsQuasigroup"/>
  <Oper Arg="Q" Name="AllLoopCongruences" Label="for IsLoop"/>
 <Returns>all right quasigroup (quasigroup, loop) congruences of a right quasigroup  (quasigroup, loop) <Code>Q</Code>. The congruences  are returned as &GAP; objects suitable
  as arguments of <Code>FactorRightQuasigroup</Code> (<Code>FactorQuasigroupLoop</Code>, <Code>FactorLoop</Code>).
  For a right quasigroup <Code>Q</Code>, there is no method yet for the case when
  <Code>RightMultiplicationGroup( Q )</Code> does not act transitively on <Code>Q</Code>.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Subalgebras_congruences_and_factor_algebras_Section_Normality_and_simplicity">
<Heading>Normality and simplicity</Heading>

 <P/>A subloop <Math>S</Math> of a loop <Math>Q</Math> is <Index>normal subloop</Index><Emph>normal</Emph> in <Math>Q</Math> if
 <Math>Sx=xS</Math>, <Math>S(xy)=(Sx)y</Math> and <Math>(xy)S = x(yS)</Math> for every <Math>x,y\in Q</Math>. 
 It can be shown that a subset <Math>S</Math> of <Math>Q</Math> is a normal subloop of <Math>Q</Math> iff there is
 a loop congruence <Math>\sim</Math> on <Math>Q</Math> such that <Math>S</Math> is the congruence class of <Math>\sim</Math>
 containing the neutral element of <Math>Q</Math>. 
 <P/>If <Code>S</Code> is a subloop of a loop <Code>Q</Code>, the function <Code>IsNormal( Q, S )</Code> returns
 <Code>true</Code> if <Code>S</Code> is normal in <Code>Q</Code>, else it returns <Code>false</Code>.
 <P/>If <Code>S</Code> is a subset or a subloop of a loop <Code>Q</Code>, <Code>NormalClosure( Q, S )</Code> returns
 the normal closure of <Code>S</Code> in <Code>Q</Code>, that is, the smallest normal
 subloop of <Code>Q</Code> containing <Code>S</Code>.
<ManSection>
  <Oper Arg="Q, S" Name="NaturalHomomorphismByNormalSubloop" Label="for IsLoop, IsLoop"/>
 <Returns>the natural projection from <Code>Q</Code> to <Code>Q/S</Code>, where <Code>Q</Code> is a loop  and <Code>S</Code> is a normal subloop of <Code>Q</Code>.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Q" Name="AllNormalSubloops" Label="for IsLoop"/>
 <Returns>a list of all normal subloops of a loop <Code>Q</Code>. Normal subloops  correspond to blocks of the multiplication group of <Code>Q</Code> that contain the neutral element.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


 <P/>A right quasigroup <Math>Q</Math> is <Index>simple right quasigroup</Index><Emph>simple</Emph> if the only
 congruences on <Math>Q</Math> are the diagonal congruence <Math>\{(x,x):x\in Q\}</Math> and the full congruence
 <Math>Q\times Q</Math>. It is well known that a quasigroup (loop) <Math>Q</Math> is
 simple iff its multiplication group <Math>\mathrm{Mlt}(Q)=\langle R_x,L_x:x\in Q\rangle</Math> acts primitively
 on <Math>Q</Math> (see Section <Ref Sect="Section_Mlt"/>).
</Section>


<Section Label="Chapter_Subalgebras_congruences_and_factor_algebras_Section_Factor_algebras">
<Heading>Factor algebras</Heading>

 <P/>When <Math>\sim</Math> is a congruence on <Math>A</Math>, then the factor algebra <Math>A/\sim</Math> is well defined
 on the equivalence classes <Math>[x]</Math> of <Math>\sim</Math> by setting <Math>f([x_1],\dots,[x_m]) = [f(x_1,\dots,x_m)]</Math>
 for every operation <Math>f</Math> of arity <Math>m</Math> in the signature of the enveloping variety <Math>V</Math>
 and every <Math>x_1,\dots,x_m\in A</Math>.
 <P/>In case of right quasigroups and quasigroups, the factor construction based on congruences
 is the standard way of defining factor alegbras. In case of loops,
 the equivalence classes of <Math>\sim</Math> are precisely the cosets of the normal subloop 
 <Math>S</Math>, the equivalence class of the identity element. The congruence-based factor algebra
 construction is then equivalent to the standard coset-based construction <Math>Sx\cdot Sy = S(xy)</Math> from group theory.
<ManSection Label="AutoDoc_generated_group3">
<Heading>Constructing factor algebras</Heading>
  <Func Arg="C [, indexBased, checkArgs ]" Name="FactorRightQuasigroup" />
  <Func Arg="C [, indexBased, checkArgs ]" Name="FactorQuasigroup" />
  <Func Arg="C [, indexBased, checkArgs ]" Name="FactorLoop" />
 <Returns>the factor algebra of <Code>Source( C )</Code> modulo the right quasigroup (resp. quasigroup,  loop) congruence <Code>C</Code>. In case of loops we also allow arguments <Code>Q</Code> and <Code>N</Code> instead of <Code>C</Code>,
  where <Code>Q</Code> is a loop and <Code>N</Code> is a normal subloop of <Code>Q</Code>.
  See Section <Ref Sect="Section_OptionalArguments"/> for the optional arguments.
</Returns>
 <Description>
<P/>
An effort is made for the factor algebra to inherit properties from the enveloping algebra.
 For instance, if it is known that the enveloping algebra is commutative, the factor algebra will
 have an attribute that signifies it is commutative.
 </Description>
</ManSection>


 <P/>We also support infix notation for factor algebras, that is, <Code>Q/C</Code> or <Code>Q/N</Code>. In that version:
 <List>
      <Item>the enveloping algebra <Code>Q</Code> must always be given,</Item>
      <Item>the two optional arguments <Code>indexBased</Code> and <Code>checkArgs</Code> cannot be given,</Item>
      <Item>the resulting algebra will be index based iff <Code>Q</Code> is index based.</Item>
 </List>
<Example><![CDATA[
gap> Q := ProjectionRightQuasigroup([1..6]);;
gap> C := EquivalenceRelationByPartition( Q, [[Q.1,Q.2],[Q.3,Q.4,Q.5],[Q.6]] );;
gap> [ IsRightQuasigroupCongruence( C ), IsQuasigroupCongruence( C ), IsLoopCongruence( C ) ];
[ true, false, false ]
gap> F := Q/C;
<associative right quasigroup of size 3>
gap> Elements( F ); # the inner "r" comes from Q, the outer "r" from F. Also, {x} denotes the equivalence class of x.
[ r{r1}, r{r3}, r{r6} ]
gap> H := FactorRightQuasigroup( C, false ); # non-index based version is supported (but not for /)
<associative right quasigroup of size 3>
gap> HasMultiplicationTable( H );
false
gap> H.1*H.2;
r{r1}
gap> CayleyTable( H );
[ [ {r1}, {r1}, {r1} ], [ {r3}, {r3}, {r3} ], [ {r6}, {r6}, {r6} ] ]
]]></Example>


</Section>


<Section Label="Chapter_Subalgebras_congruences_and_factor_algebras_Section_An_example_of_the_factor_construction_Paige_loops">
<Heading>An example of the factor construction: Paige loops</Heading>

 <P/>We conclude with a larger example, the construction of finite simple Moufang loops, so-called
 Paige loops. These are obtained as the factor of the multiplicative set <Math>S</Math> of
 elements of norm one in the Zorn vector matrix algebra modulo the center of <Math>S</Math>.
<Example><![CDATA[
gap> # auxiliary functions
gap> DotProduct := function( x, y ) return Sum( [1..Length(x)], i -> x[i]*y[i] ); end;;
gap> CrossProduct := function( x, y ) return [ x[2]*y[3]-x[3]*y[2], x[3]*y[1]-x[1]*y[3], x[1]*y[2]-x[2]*y[1] ]; end;;
gap> PaigeNorm := function( x ) return x[1]*x[8] - DotProduct( x{[2,3,4]},x{[5,6,7]} ); end;;
gap> PaigeMult := function( x, y )
> local a, b, c, d;
> a := x[1]*y[1] + DotProduct(x{[2,3,4]},y{[5,6,7]});
> b := x[1]*y{[2,3,4]} + x{[2,3,4]}*y[8] - CrossProduct(x{[5,6,7]},y{[5,6,7]});
> c := x{[5,6,7]}*y[1] + x[8]*y{[5,6,7]} + CrossProduct(x{[2,3,4]},y{[2,3,4]});
> d := DotProduct(x{[5,6,7]},y{[2,3,4]})+x[8]*y[8];
> return Concatenation( [a], b, c, [d] );
> end;;
gap> # Paige loop over GF(2) (index based approach in characteristic 2)
gap> F := GF(2);;
gap> S := Filtered( F^8, x -> PaigeNorm( x ) = One( F ) );;
gap> P := LoopByFunction( S, PaigeMult, true, true ); 
<loop of size 120>
gap> # general approach (not index based, any characteristic, using congruences)
gap> n := 3;; # any prime power works but it will be very slow
gap> F := GF(n);;
gap> S := Filtered( F^8, x -> PaigeNorm( x ) = One( F ) );;
gap> M := LoopByFunction( S, PaigeMult, false, false );;
gap> SetLoopElementsName(M,"m");; # for easier reading of factor elements, must factor out +/- one
gap> C := EquivalenceRelationByPartition( M, Set( S, x -> Set( [ M[x], M[-x] ] ) ) );; 
gap> P := FactorLoop( C, false, false); # 2000 ms
<loop of size 1080>
gap> # another approach using normal subloop
gap> n := 3;; F := GF(n);; S := Filtered( F^8, x -> PaigeNorm( x ) = One( F ) );;
gap> M := LoopByFunction( S, PaigeMult, false, false );;
gap> one := [ Z(n)^0, 0*Z(n), 0*Z(n), 0*Z(n), 0*Z(n), 0*Z(n), 0*Z(n), Z(n)^0 ];;
gap> N := Subloop( M, [-one] );;
gap> P := FactorLoop( M, N, false, false ); # 2000 ms, it takes a while to find the neutral element
<loop of size 1080>
]]></Example>


</Section>


<Section Label="Chapter_Subalgebras_congruences_and_factor_algebras_Section_Subalgebras">
<Heading>Subalgebras</Heading>

 <P/>A subset <Math>S</Math> of a right quasigroup <Math>Q</Math> is a <Index>subrightquasigroup</Index>
 <Emph>subrightquasigroup</Emph> of <Math>Q</Math> if it is closed under multiplication and right division.
 A subset <Math>S</Math> of a quasigroup (resp. loop) <Math>Q</Math> is a <Index>subquasigroup</Index> 
 <Emph>subquasigroup</Emph> (resp. <Index>subloop</Index><Emph>subloop</Emph>) if it is closed under
 multiplication and both divisions. In all of the above cases, when <Math>Q</Math> is finite,
 <Math>S</Math> is a subalgebra if it is closed under multiplicaton.
 <P/>In &RightQuasigroups;, if a subalgebra <Code>S</Code> is created from an algebra <Code>Q</Code>,
 the parent of <Code>S</Code> is set to <Code>Q</Code> and the elements of <Code>S</Code> are inherited from <Code>Q</Code>,
 cf. Section <Ref Sect="Section_Parent"/>. If <Code>A</Code>, <Code>B</Code> are two algebras then
 <Code>A</Code> is a subalgebra of <Code>B</Code> iff <Code>Parent( A ) = Parent( B )</Code> and <Code>A</Code> is a subset of <Code>B</Code>.
<ManSection Label="AutoDoc_generated_group49">
<Heading>Testing for subalgebras</Heading>
  <Oper Arg="Q, S" Name="IsSubrightquasigroup" Label="for IsRightQuasigroup, IsRightQuasigroup"/>
  <Oper Arg="Q, S" Name="IsSubquasigroup" Label="for IsQuasigroup, IsQuasigroup"/>
  <Oper Arg="Q, S" Name="IsSubloop" Label="for IsLoop, IsLoop"/>
 <Returns>true if a right quasigroup (quasigroup, loop) <Code>S</Code>  is a subrightquasigroup (subquasigroup, subloop) of a right quasigroup
  (quasigroup, loop) <Code>Q</Code>, else returns <Code>false</Code>. 
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<ManSection Label="AutoDoc_generated_group50">
<Heading>Constructing subalgebras</Heading>
  <Oper Arg="Q, gens" Name="Subrightquasigroup" Label="for IsRightQuasigroup, IsCollection"/>
  <Oper Arg="Q, gens" Name="Subquasigroup" Label="for IsQuasigroup, IsCollection"/>
  <Oper Arg="Q, gens" Name="Subloop" Label="for IsLoop, IsList"/>
 <Returns>the subrightquasigoup (subquasigroup, subloop) of a right quasigroup (quasigroup, loop) <Code>Q</Code>  generated by the list of elements <Code>gens</Code>. We allow <Code>gens</Code> to consist of elements of <Code>Q</Code> or 
  of elements of the underlying set of <Code>Q</Code>. Note that there are no optional arguments in this constructor.
  The resulting subalgebra will be index based (cf. Section <Ref Sect="Section_IndexBased"/>) iff
  <Code>Q</Code> is index based. For subloops, we allow <Code>gens</Code> to be an empty set, in which case the trivial
  subloop is returned.
</Returns>
 <Description>
<P/>
An effort is made for the subalgebra to inherit properties from <Code>Q</Code>. For instance,
 if it is known that <Code>Q</Code> is commutative, the subalgebra will have an attribute that signifies it
 is commutative.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Q := LoopByFunction([0..7],function(x,y) return (x+y) mod 8; end);;
gap> S := Subrightquasigroup( Q, [4] ); # inherits loop property from parent
<loop of size 2>
gap> [ IsSubrightquasigroup( Q, S ), IsSubquasigroup( Q, S ), IsSubloop( Q, S ) ];
[ true, true, true ]
gap> Elements( S ); # note indexing of elements here and below
[ l0, l4 ]
gap> Elements( S )[ 2 ]; # the 2nd element of S
l4
gap> S.2; # the 2nd element of Q, the parent of S
l1
gap> S[4]; # the element of parent Q corresponding to the given element of the underlying set
l4 
gap> Display( CayleyTable( S ) );
[ [  0,  4 ],
  [  4,  0 ] ]
gap> RightTranslation( Q, Q[4] ); # a permutation of the index set of Q
(1,5)(2,6)(3,7)(4,8)
gap> RightTranslation( S, S[4] ); # a permutation of the index set of S
(1,5)
gap> Subquasigroup( Q, [4] );
<loop of size 2>
gap> Subloop( Q, [4] );
<loop of size 2>
]]></Example>


<ManSection Label="AutoDoc_generated_group51">
<Heading>All subalgebras</Heading>
  <Oper Arg="Q" Name="AllSubrightquasigroups" Label="for IsRightQuasigroup"/>
  <Oper Arg="Q" Name="AllSubquasigroups" Label="for IsQuasigroup"/>
  <Oper Arg="Q" Name="AllSubloops" Label="for IsLoop"/>
 <Returns>a list of all subrightquasigroups (subquasigroups, subloops) of  a right quasigroup (quasigroup, loop) <Code>Q</Code>.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> AllSubloops( AsLoop( SymmetricGroup( 3 ) ) );
[ <associative loop of size 1>, <associative loop of size 2>, <associative loop of size 2>,
  <associative loop of size 3>, <associative loop of size 2>, <associative loop of size 6> ]
gap> P := ProjectionRightQuasigroup( [1..2] );; 
gap> AllSubrightquasigroups( P ); # every nonempty subset is a subrightquasigroup
[ <associative right quasigroup of size 1>, <associative right quasigroup of size 1>,
  <associative right quasigroup of size 2> ]
]]></Example>


</Section>


<Section Label="Chapter_Subalgebras_congruences_and_factor_algebras_Section_Right_cosets_and_transversals">
<Heading>Right cosets and transversals</Heading>

 <P/>If <Math>S</Math> is a subrightquasigroup of a right quasigroup <Math>Q</Math>, the <Index>right cosets</Index>
 <Emph>right cosets</Emph> are subsets of <Math>Q</Math> of the form <Math>Sx</Math>, where <Math>x\in Q</Math>. Note that
 unlike in the case of groups, the right cosets of right quasigroups, quasigroups and loops
 can intersect in nontrivial ways. Moreover, in the case of right quasigroups, the
 right cosets need not cover <Code>Q</Code>.
<P/>
 <P/> A <Index>right transversal</Index><Emph>right transversal</Emph>
 to <Math>S</Math> in <Math>Q</Math> is then a list of elements of <Code>Q</Code> containing one element from each right coset of <Math>S</Math> in <Math>Q</Math>.
 <P/>In &RightQuasigroups;, the right cosets and right transversals are mere lists, 
 not special &GAP; objects.
 <P/>The function <Code>RightCosets( Q, S )</Code> returns a list of all right cosets of <Code>S</Code> in <Code>Q</Code>.
<ManSection>
  <Oper Arg="Q, S" Name="RightTransversal" Label="for IsRightQuasigroup, IsRightQuasigroup"/>
 <Returns>a right transversal to <Code>S</Code> in <Code>Q</Code>.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> P := ProjectionRightQuasigroup( [1..3] );
<associative right quasigroup of size 3>
gap> S := Subrightquasigroup( P, [1,2] );
<associative right quasigroup of size 2>
gap> RightCosets( P, S ); # there is a single right coset of S in P
[ [ r1, r2 ] ]
gap> RightTransversal( P, S );
[ r1 ]
]]></Example>


</Section>


<Section Label="Chapter_Subalgebras_congruences_and_factor_algebras_Section_Right_quasigroups_by_generators">
<Heading>Right quasigroups by generators</Heading>

 <P/>In analogy with the <Code>Group</Code> function in &GAP;, we provide methods for generating
 right quasigroups (quasigroups, loops) from a list of right quasigroup (quasigroup, loop) elements.
<ManSection Label="AutoDoc_generated_group52">
<Heading>RightQuasigroup, Quasigroup and Loop</Heading>
  <Func Arg="gens..." Name="RightQuasigroup" />
  <Func Arg="gens..." Name="Quasigroup" />
  <Func Arg="gens..." Name="Loop" />
 <Returns>the right quasigroup (quasigroup, loop) generated by the given right quasigroup  (quasigroup, loop) elements. The argument must be a list of right quasigroup (quasigroup, loop)
  elements within the same parent algebra. Both <Code>RightQuasigropp( gen1, gen2, ...)</Code> and 
  <Code>RightQuasigroup( [gen1, gen2, ... ] )</Code> are supported. The attribute <Code>GeneratorsOfMagma</Code> 
  (see <Ref Sect="Section_Generators"/> might or might not be set to coincide with the given
  list of generators.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<ManSection Label="AutoDoc_generated_group53">
<Heading>RightQuasigroupByGenerators, QuasigroupByGenerators and LoopByGenerators</Heading>
  <Func Arg="gens..." Name="RightQuasigroupByGenerators" />
  <Func Arg="gens..." Name="QuasigroupByGenerators" />
  <Func Arg="gens..." Name="LoopByGenerators" />
 <Returns>the right quasigroup (quasigroup, loop) generated by the given right quasigroup  (quasigroup, loop) elements. This is the function called by <Code>RightQuasigroup</Code> (<Code>Quasigroup</Code>, <Code>Loop</Code>).
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<ManSection Label="AutoDoc_generated_group54">
<Heading>RightQuasigroupWithGenerators, QuasigroupWithGenerators and LoopWithGenerators</Heading>
  <Func Arg="gens..." Name="RightQuasigroupWithGenerators" />
  <Func Arg="gens..." Name="QuasigroupWithGenerators" />
  <Func Arg="gens..." Name="LoopWithGenerators" />
 <Returns>the right quasigroup (quasigroup, loop) generated by the given right quasigroup  (quasigroup, loop) elements. This is just like <Code>RightQuasigroup</Code> (<Code>Quasigroup</Code>, <Code>Loop</Code>)
  except that it is guaranteed that the value of <Code>GeneratorsOfMagma</Code> will be set
  to coincide with the given list of generators.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Subalgebras_congruences_and_factor_algebras_Section_Intersections_and_joins_of_right_quasigroups">
<Heading>Intersections and joins of right quasigroups</Heading>

 <P/>Given a list <Code>algebras</Code> of at least two right quasigroups (quasigroups, loops) with the same parent algebra,
 <Code>Intersection( algebras )</Code> returns their intersection subalgebra. We also support
 <Code>Intersection( algebra1, algebra2, ... )</Code>.
 <P/>Passing of arguments for <Code>Intersection</Code> is handled in the standard &GAP; way.
 The only method implemented in &RightQuasigroups; is <Code>Intersection2</Code> for the intersection of
 two right quasigroups.
 <P/>Given a list <Code>algebras</Code> of right quasigroups (quasigroups, loops) with the same parent algebra,
 <Code>Join( algebras )</Code> returns the smallest subalgebra containing all algebras in the list. We also support
 <Code>Join( algebra1, algebra2, ... )</Code>.
 <P/>The function <Code>Join</Code> does not seem to be implemented in &GAP;. In
 &RightQuasigroups;, <Code>Join</Code> and <Code>Join2</Code> are implemented in a way analogous to <Code>Intersection</Code> and <Code>Intersection2</Code>,
 except that we allow a single algebra as the argument, in which case that algebra is returned.
</Section>


</Chapter>

