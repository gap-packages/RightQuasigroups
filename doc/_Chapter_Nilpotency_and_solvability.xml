<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_Nilpotency_and_solvability">
<Heading>Nilpotency and solvability</Heading>

 <P/>Nilpotency and solvability are well-developed for loops but less so for quasigroups and right quasigroups.
 Many methods described in this chapter therefore apply only to loops.    
<Section Label="Chapter_Nilpotency_and_solvability_Section_Nuclei_commutant_and_center">
<Heading>Nuclei, commutant and center</Heading>

 <P/>The <Index>right nucleus</Index><Emph>right nucleus</Emph> (resp. <Index>middle nucleus</Index><Emph>middle nucleus</Emph>,
 <Index>left nucleus</Index><Emph>left nucleus</Emph>) of a right quasigroup <Math>Q</Math> is the set
 <Math>\mathrm{Nuc}_r(Q) = \{z\in Q:x(yz)=(xy)z</Math> for all <Math>x,y\in Q\}</Math> (resp.
 <Math>\mathrm{Nuc}_m(Q) = \{y\in Q:x(yz)=(xy)z</Math> for all <Math>x,z\in Q\}</Math>,
 <Math>\mathrm{Nuc}_\ell(Q) = \{x\in Q:x(yz)=(xy)z</Math> for all <Math>y,z\in Q\}</Math>).
 The <Index>nucles</Index><Emph>nucleus</Emph> <Math>\mathrm{Nuc}(Q)</Math> of <Math>Q</Math> is the intesection of the three nuclei.
 <P/>In the finite case, each of the four nuclei is either an empty set or a subalgebra. 
 For loops, each of the four nuclei is always a subloop.
 <P/>The <Index>commutant</Index><Emph>commutant</Emph> of a right quasigroup <Math>Q</Math> is the
 possibly empty set <Math>\{x\in Q:xy=yx</Math> for all <Math>y\in Q\}</Math>. 
 In the case of loops, the neutral element always belongs to the commutant.
 <P/>The <Index>center</Index><Emph>center</Emph> of a right quasigroup is the
 intersection of the nucleus and the commutant. In the case of loops, the
 center is always a normal subloop.
<ManSection Label="AutoDoc_generated_group52">
<Heading>Nuclei</Heading>
  <Attr Arg="Q" Name="RightNucleus" Label="for IsRightQuasigroup"/>
  <Attr Arg="Q" Name="MiddleNucleus" Label="for IsRightQuasigroup"/>
  <Attr Arg="Q" Name="LeftNucleus" Label="for IsRightQuasigroup"/>
  <Attr Arg="Q" Name="Nuc" Label="for IsRightQuasigroup"/>
 <Returns>the (right, middle, left) nucleus of a right quasigroup <Code>Q</Code>,  either as the empty set or as a subalgebra of <Code>Q</Code>.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


 <P/>We also support the synonyms <Code>NucleusOfRightQuasigroup</Code>, <Code>NucleusOfQuasigroup</Code>
 and <Code>NucleusOfLoop</Code> of <Code>Nuc</Code>.
<ManSection>
  <Attr Arg="Q" Name="Commutant" Label="for IsRightQuasigroup"/>
 <Returns>the commutant of the rigt quasigroup <Code>Q</Code>, a possibly empty subset of <Code>Q</Code>.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="Q" Name="Center" Label="for IsRightQuasigroup"/>
 <Returns>the center of the right quasigroup <Code>Q</Code>, a possibly empty subset of <Code>Q</Code>.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Nilpotency_and_solvability_Section_Nilpotency_for_loops">
<Heading>Nilpotency for loops</Heading>

 The <Index>nilpotency class</Index><Emph>nilpotency class</Emph> of a loop <Math>Q</Math> is defined inductively
 by <Math>cl(Q)=1</Math> if <Math>Q</Math> is an abelian group and by <Math>cl(Q)=cl(Q/Z(Q))+1</Math>, if this process terminates,
 in which case <Code>Q</Code> is <Index>nilpotent loop</Index><Emph>nilpotent</Emph>.
<ManSection>
  <Attr Arg="Q" Name="NilpotencyClassOfLoop" Label="for IsLoop"/>
 <Returns>the nilpotency class of a loop <Code>Q</Code>. When <Code>Q</Code> is not nilpotent, returns <Code>fail</Code>.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Q" Name="IsNilpotentLoop" Label="for IsLoop"/>
 <Returns><Code>true</Code> if <Code>Q</Code> is a nilpotent loop, else returns <Code>false</Code>.  The non-qualified version <Code>IsNilpotent</Code> is also supported, cf. Section <Ref Sect="Section_Nonqualified"/>.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Q" Name="UpperCentralSeriesOfLoop" Label="for IsLoop"/>
 <Returns>the upper central series of the loop <Code>Q</Code>, that is, the series  <Math>[Z_0(Q), Z_1(Q), Z_2(Q), ...]</Math>, where <Math>Z_0(Q)=1</Math> and <Math>Z_{n+1}(Q)</Math> is the preimage of <Math>Z(Q/Z_n(Q))</Math>
  under the canonical projection <Math>Q\to Q/Z_n(Q)</Math>. The function returns the longest strictly increasing segment
  of the upper central series. The non-qualified version <Code>UpperCentralSeries</Code> is also supported.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Q" Name="LowerCentralSeriesOfLoop" Label="for IsLoop"/>
 <Returns>the lower central series of the loop <Code>Q</Code>, that is, the series  <Math>Q=Q_{(0)}\ge Q_{(1)}\ge Q_{(2)}\ge \dots</Math> such that <Math>Q_{(i+1)}</Math> is the smallest normal subloop of <Math>Q</Math>
  such that <Math>Q_{(i)}/Q_{(i+1)}\le Z(Q/Q_{(i+1)})</Math>.
  The function returns the longest strictly decreasing segment of the lower central series.
  The non-qualified version <Code>LowerCentralSeries</Code> is also supported.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Nilpotency_and_solvability_Section_Solvability_and_congruence_solvability_for_loops">
<Heading>Solvability and congruence solvability for loops</Heading>

 <P/>There are two competing notions of solvability in loop theory and both are supported in
 &RightQuasigroups;.
 <P/>A loop <Math>Q</Math> is <Index>classically solvable loop</Index><Emph>classically solvable</Emph>
 if there exists a series <Math>Q=Q_0&gt; Q_1&gt;\dots&gt;Q_n=1</Math> such that <Math>Q_i\unlhd Q</Math> and <Math>Q_i/Q_{i+1}</Math> 
 is a commutative group. To conform with historical terminology, we call classically solvable loops
 <Emph>solvable</Emph>.
 <P/>There is a well-established universal-algebraic notion of commutators of congruences in
 congruence-modular varieties, which includes the variety of loops. We denote by <Math>[A,B]_Q</Math> this
 commutator of two normal subloops <Math>A</Math>, <Math>B</Math> of a loop <Math>Q</Math>. A normal subloop <Math>A</Math> is 
 <Index>abelian subloop</Index><Emph>abelian in</Emph> <Math>Q</Math> if <Math>[A,A]_Q=1</Math>. If a normal subloop
 <Math>A</Math> is abelian in <Math>Q</Math> then <Math>A</Math> is a commutative group, but not necessarily vice versa.
 <P/>A loop <Math>Q</Math> is then <Index>congruence solvable loop</Index><Emph>congruence solvable</Emph> if there
 exists a series <Math>Q=Q_0&gt; Q_1&gt;\dots&gt;Q_n=1</Math> such that <Math>Q_i\unlhd Q</Math> and <Math>Q_i/Q_{i+1}</Math> is abelian
 in <Math>Q/Q_{i+1}</Math>. Universally-algebraically speaking, this is the correct notion of solvablity
 for loops. Every congruence solvable loop is classically solvable but not necessarily
 vice versa. A group is congruence solvable iff it is classically solvable.
<ManSection>
  <Attr Arg="Q" Name="AssociatorSubloop" Label="for IsLoop"/>
 <Returns>the <Index>associator subloop</Index><Emph>associator subloop</Emph> of <Code>Q</Code>, that is,  the smallest normal subloop of <Code>Q</Code> containing all associators.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Q" Name="IsSolvableLoop" Label="for IsLoop"/>
 <Returns><Code>true</Code> if <Code>Q</Code> is a (classically) solvable loop, else returns <Code>false</Code>. The non-qualified  version <Code>IsSolvable</Code> is also supported.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="Q" Name="DerivedSubloop" Label="for IsLoop"/>
 <Returns>the <Index>derived subloop</Index><Emph>derived subloop</Emph> of <Code>Q</Code>, that is, the smallest  normal subloop <Code>A</Code> of <Code>Q</Code> such that <Code>Q/A</Code> is an abelian group. Note that this coincides
  with the congruence derived subloop <Math>[Q,Q]_Q</Math> and there is therefore no need for
  <Code>CongruenceDerivedSubloop</Code>.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Q" Name="DerivedSeriesOfLoop" Label="for IsLoop"/>
 <Returns>the derived series of <Code>Q</Code>. If <Math>Q'</Math> denotes the derived subloop of <Math>Q</Math>, then  the derived series is the series <Math>[Q,Q',Q'',\dots]</Math>. The function returns the longest
  strictly decreasing initial segment of the derived series. The non-qualified version
  <Code>DerivedSeries</Code> is also supported.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="Q" Name="DerivedLength" Label="for IsLoop"/>
 <Returns>the number of steps in the derived series of the loop <Code>Q</Code> if <Code>Q</Code> is solvable, else  returns <Code>fail</Code>.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<P/>The following methods deal with congruence solvability of loops.
<ManSection>
  <Oper Arg="Q, A, B" Name="CommutatorOfNormalSubloops" Label="for IsLoop, IsLoop, IsLoop"/>
 <Returns>the commutator of normal subloops <Code>A</Code>, <Code>B</Code> of the loop <Code>Q</Code>, that is, <Math>[A,B]_Q</Math>. For finite loops,  <Math>[A,B]_Q</Math> is the smallest normal subloop of <Math>Q</Math> contaning the elements <Math>R_{b_1,c_1}(a)/R_{b_2,c_2}(a)</Math>,
  <Math>L_{b_1,c_1}(a)/L_{b_2,c_2}(a)</Math>, <Math>T_{b_1}(a)/T_{b_2}(a)</Math>, where <Math>a\in A</Math>, <Math>b_1/b_2\in B</Math>, <Math>c_1/c_2\in B</Math>
  and where <Math>R_{x,y}</Math>, <Math>L_{x,y}</Math>, <Math>T_x</Math> are the standard inner mappings of <Math>Q</Math>.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Q, A" Name="IsAbelianNormalSubloop" Label="for IsLoop, IsLoop"/>
 <Returns><Code>true</Code> if <Code>A</Code> is an abelian (in the universal-algebraic sense) normal subloop of the loop <Code>Q</Code>, else returns <Code>false</Code>.  A normal subloop <Math>A</Math> of <Math>Q</Math> is abelian in <Math>Q</Math> if <Math>[A,A]_Q=1</Math>.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Q" Name="IsCongruenceSolvableLoop" Label="for IsLoop"/>
 <Returns><Code>true</Code> if <Code>Q</Code> is a congruence solvable loop, else returns <Code>false</Code>.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Q" Name="CongruenceDerivedSeriesOfLoop" Label="for IsLoop"/>
 <Returns>the congruence derived series of <Code>Q</Code>. With <Math>Q^{(0)}=Q</Math> and <Math>Q^{(i+1)} = [Q^{(i)},Q^{(i)}]_Q</Math>,  this is the series <Math>[Q^{(0)},Q^{(1)},Q^{(2)},\dots]</Math>. The function returns the longest
  strictly decreasing initial segment of the congruence derived series. 
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="Q" Name="CongruenceDerivedLength" Label="for IsLoop"/>
 <Returns>the number of steps in the congruence derived series of the loop <Code>Q</Code> if <Code>Q</Code> is congruence  solvable, else returns <Code>fail</Code>.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> uset := Union( List([0..3], i-> [[i,0],[i,1]] ) ); # the underlying set
[ [ 0, 0 ], [ 0, 1 ], [ 1, 0 ], [ 1, 1 ], [ 2, 0 ], [ 2, 1 ], 
  [ 3, 0 ], [ 3, 1 ] ]
gap> ct := [[0,1,2,3],[1,3,0,2],[2,0,3,1],[3,2,1,0]];;
gap> mult := function( x, y )
>         if x[2]=0 or y[2]=0 then
>                 return [ (x[1]+y[1]) mod 4, (x[2]+y[2]) mod 2 ];
>         else
>                 return [ ct[x[1]+1,y[1]+1], (x[2]+y[2]) mod 2 ];
>         fi;
>   end;
function( x, y ) ... end
gap> Q := LoopByFunction( uset, mult ); # Z_4 x Z_2 with one quandrant "replaced" with ct
<loop of size 8>
gap> DerivedSeries( Q );
[ <loop of size 8>, <loop of size 4>, 
  <trivial group with 1 generator> ]
gap> IsSolvable( Q );
true
gap> DerivedLength( Q );
2
gap> C := CommutatorOfNormalSubloops(Q,Q,Q); # congruence derived subloop = derived subloop
<loop of size 4>
gap> D := CommutatorOfNormalSubloops(Q,C,C); # 2nd congruence derived subloop differs from 2nd derived subloop
<loop of size 4>
gap> CongruenceDerivedSeriesOfLoop( Q );
[ <loop of size 8>, <loop of size 4> ]
gap> IsCongruenceSolvableLoop( Q );
false
gap> CongruenceDerivedLength( Q );
fail
gap> IsCommutative( C ) and IsAssociative( C ) and IsNormal( Q, C ); # commutative group, normal in Q
true
gap> IsAbelianNormalSubloop( Q, C ); # but not abelian in Q
false
]]></Example>


</Section>



<Section Label="Chapter_Nilpotency_and_solvability_Section_Nuclear_and_central_extensions_of_loops">
<Heading>Nuclear and central extensions of loops</Heading>

 <P/>A loop <Math>Q</Math> is an <Emph>extension</Emph><Index>extension</Index> of <Math>K</Math> by <Math>F</Math> if
 <Math>K</Math> is a normal subloop of <Math>Q</Math> such that <Math>Q/K</Math> is isomorphic to <Math>F</Math>.
 If <Math>K</Math> is in the nucleus of <Math>Q</Math> then the extension is <Emph>nuclear</Emph><Index Subkey="nuclear">extension</Index>,
 while if <Math>K</Math> is in the center of <Math>Q</Math> then the enxtension is <Emph>central</Emph><Index Subkey="central">extension</Index>.
 <P/>If <Math>K</Math>, <Math>F</Math> are loops then <Math>\theta:F\times F\to K</Math> is a <Emph>loop cocycle</Emph><Index>cocycle</Index>
 if <Math>\theta(x,1_F)=\theta(1_F,x)=1_K</Math> for all <Math>x\in F</Math>. In &RightQuasigroups;, a loop cocycle is represented
 as an <Math>|F|\times |F|</Math> table with entries in <Math>[1..|K|]</Math>.
 <P/>Every nuclear extension of <Math>K</Math> by <Math>F</Math> with <Math>K</Math> an abelian group is isomorphic to the loop
 <Math>(K\times F,\circ)</Math>, where <Math>(a,x)\circ(b,y) = (a\phi_x(b)\theta(x,y),xy)</Math> for some
 homomorphism <Math>\phi:F\to\mathrm{Aut}(K)</Math> and some loop cocycle <Math>\theta:F\times F\to K</Math>.
 <P/>Every central extension of <Math>K</Math> by <Math>F</Math> is isomorphic to the loop
 <Math>(K\times F,\circ)</Math>, where <Math>(a,x)\circ(b,y) = (ab\theta(x,y),xy)</Math> for some loop
 cocycle <Math>\theta:F\times F\to K</Math>. This loop will also be denoted by <Math>K\times_\theta F</Math>.
<ManSection>
  <Oper Arg="K, F, theta" Name="IsLoopCocycle" Label="for IsLoop, IsLoop, IsRectangularTable"/>
 <Returns><Code>true</Code> if <Arg>theta</Arg> is a loop cocycle from <Arg>F</Arg> to <Arg>K</Arg>,  else returns <Code>false</Code>.
  A loop cocycle is an <Math>|F|\times |F|</Math> table with entries in <Math>[1..|K|]</Math> such that all entries
  in the row and in the column corresponding to the neutral element of <Math>F</Math> are equal to
  the neutral element of <Math>K</Math>.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="K, F, phi, theta[, constructorStyle]" Name="LoopByNuclearExtension" Label="for IsLoop, IsLoop, IsList, IsRectangularTable"/>
 <Returns>the nuclear extension of the abelian group <Arg>K</Arg> by the loop <Arg>F</Arg>  via the homomorphism <Arg>phi</Arg> and cocycle <Arg>theta</Arg>. The arguments must be
  formatted as follows:
  <Arg>K</Arg> is a commutative and associative loop of size <Code>nK</Code>,
  <Arg>F</Arg> is a loop of size <Code>nF</Code>,
  <Arg>phi</Arg> is a list of length <Code>nF</Code> consisting of permutations of <Code>[1..nK]</Code> (each permutation
  standing for an automorphism of <Arg>K</Arg>),
  <Arg>theta</Arg> is an <Code>nF</Code> by <Code>nF</Code> matrix with entries in <Code>[1..nK]</Code>.
  We also support giving the first four arguments as a list.
  The loop is returned as index based loop with the underlying set equal to the carthesian product of
  the underlying sets of <Code>K</Code> and <Code>F</Code>, and with multiplication 
  <Code>[a,x]*[b,y] = [a * b^phi[x] * theta[x,y], x*y ]</Code>. 
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="K, F, theta[, constructorStyle]" Name="LoopByCentralExtension" Label="for IsLoop, IsLoop, IsRectangularTable"/>
 <Returns>the central extension of the abelian group <Arg>K</Arg> by the loop <Arg>F</Arg>  via the cocycle <Arg>theta</Arg>. The format of arguments and of the resulting loop are the same
  as in <Code>LoopByNuclearExtension</Code>. We also support giving the first three arguments as a list.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> K := AsLoop( CyclicGroup( 4 ) );;
gap> F := LoopByCayleyTable( [ [ "a", "b" ], [ "b", "a" ] ] );;
gap> AutomorphismGroup( K );
Group([ (2,4) ])
gap> phi := [ (), (2,4) ];; # homomorphism from F to Aut( K )
gap> theta := [ [ 1, 1 ], [ 1, 4 ] ];; # loop cocycle from FxF to K
gap> IsLoopCocycle( K, F, theta );
true
gap> Q := LoopByNuclearExtension( K, F, phi, theta );
<loop of size 8>
gap> S := NucleusOfLoop( Q );
<associative loop of size 4>
gap> IsNormal( Q, S );
true
gap> AsCanonicalPerm( IsomorphismLoops( F, Q/S ) );
()
gap> Display( MultiplicationTable( Q ) );
[ [  1,  2,  3,  4,  5,  6,  7,  8 ],
  [  2,  7,  8,  5,  6,  3,  4,  1 ],
  [  3,  4,  5,  6,  7,  8,  1,  2 ],
  [  4,  1,  2,  7,  8,  5,  6,  3 ],
  [  5,  6,  7,  8,  1,  2,  3,  4 ],
  [  6,  3,  4,  1,  2,  7,  8,  5 ],
  [  7,  8,  1,  2,  3,  4,  5,  6 ],
  [  8,  5,  6,  3,  4,  1,  2,  7 ] ]
gap> Q.1; # the underlying set of Q is the carthesian product of underlying sets K x F
l[ <identity> of ..., "a" ]
gap> LoopByCentralExtension( K, F, theta );
<loop of size 8>
gap> Center( last );
<associative loop of size 8>
]]></Example>


<ManSection>
  <Oper Arg="ls" Name="AsSquareTable" Label="for IsList"/>
 <Returns>If <Arg>ls</Arg> is a list of length <Code>n^2</Code> for some <Code>n</Code>, returns  <Arg>ls</Arg> as a square table, a list of lists of length <Code>n</Code>.
</Returns>
 <Description>
Note: This function is convenient for transforming row vector cocycles obtained
 by <Code>LoopCocyclesInVariety</Code> and by similar functions to square table cocycles required by the
 <Code>LoopByNuclearExtensions</Code> function.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Q, K" Name="NuclearExtensionByNormalSubloop" Label="for IsLoop, IsLoop"/>
 <Returns>the parameters <Code>[K,F,phi,theta]</Code> for a nuclear extension of <Arg>K</Arg> by <Arg>Q</Arg><Code>/</Code><Arg>K</Arg>.  Here, <Arg>K</Arg> must be a commutative normal subloop of the nucleus of the loop <Arg>Q</Arg>.
  The returned loop <Code>K</Code> is identical to the argument <Arg>K</Arg> and the returned factor loop <Code>F</Code> is identical
  to <Arg>Q</Arg><Code>/</Code><Arg>K</Arg>.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="Q, K" Name="CentralExtensionByNormalSubloop" Label="for IsLoop, IsLoop"/>
 <Returns>the parameters <Code>[K,F,theta]</Code> for a central extension of <Arg>K</Arg> by <Arg>Q</Arg><Code>/</Code><Arg>K</Arg>.  Here, <Arg>K</Arg> must be a subloop of the center of the loop <Arg>Q</Arg>.
  The returned loop <Code>K</Code> is identical to the argument <Arg>K</Arg> and the returned factor loop <Code>F</Code> is identical
  to <Arg>Q</Arg><Code>/</Code><Arg>K</Arg>.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> Q := MoufangLoop(32,3);;
gap> Nuc( Q ); # here, the nucleus is commutative and properly contains the center
<associative loop of size 4>
gap> Center( Q );
<associative loop of size 2>
gap> ext := NuclearExtensionByNormalSubloop( Q, Nuc( Q ) );
[ <associative loop of size 4>, <Moufang loop of size 8>, 
  [ (), (), (), (2,4), (), (2,4), (2,4), (2,4) ], 
  [ [ 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 3, 3 ], 
      [ 1, 3, 1, 1, 3, 1, 1, 1 ], [ 1, 1, 1, 1, 3, 1, 1, 3 ], 
      [ 1, 3, 1, 1, 3, 1, 3, 3 ], [ 1, 1, 1, 1, 3, 1, 3, 1 ], 
      [ 1, 3, 1, 1, 1, 1, 1, 3 ], [ 1, 3, 1, 1, 1, 1, 3, 1 ] ] ]
gap> copyQ := LoopByNuclearExtension( ext[1],ext[2],ext[3],ext[4] );;
gap> AsCanonicalPerm( IsomorphismLoops( Q, copyQ ) );
(4,9,11,28,29,24,22,21,20,25,27,12,13,8,6,5)(7,10)(14,30)(15,31)(16,32)(23,26)
gap> ext := CentralExtensionByNormalSubloop( Q, Center( Q ) );;
gap> copyQ := LoopByCentralExtension( ext );; # extension can also be given as a list
gap> AsCanonicalPerm( IsomorphismLoops( Q, copyQ ) );
()
]]></Example>


</Section>


<Section Label="Chapter_Nilpotency_and_solvability_Section_All_central_extensions_in_a_variety_of_loops">
<Heading>All central extensions in a variety of loops</Heading>

 <P/>If a loop <Math>Q</Math> has a nontrivial center, it is a central extension of an abelian group <Math>K</Math> of order <Math>p</Math>
 by a loop <Math>F</Math> of order <Math>|Q|/p</Math>. The following functions construct all central extensions of
 the cyclic group of order <Math>p</Math> by a given loop <Math>F</Math> in a given variety of loops.
 <P/>Just like all <Math>p</Math>-groups are centrally nilpotent, all <Math>p</Math>-loops in certain varieties
 of loops (e.g., Moufang loops) are centrally nilpotent. The following functions therefore
 allow us in principle to construct all <Math>p</Math>-loops of small orders in such varieties.
 <P/>The enveloping variety is specified as a finite list of loop identities that the built-in
 parser can understand (see Section <Ref Sect="Section_Parser"/>).
 <P/>Given a variety <Math>V</Math>, an abelian group <Math>K\in V</Math> and a loop <Math>F\in V</Math>, let <Math>\mathrm{Coc}_V(F,K)</Math> be the
 vector space of cocycles <Math>\theta:F\times F\to K</Math> such that the central extension <Math>K\times_\theta F</Math>
 is a loop in <Math>V</Math>. 
 <P/>The vector space of coboundaries <Math>\mathrm{Cob}_V(F,K)</Math> is generated by the cocycles
 <Math>\theta:F\times F\to (K,+)</Math> of the form <Math>\theta(x,y) = f(xy)-f(x)-f(y)</Math>, where
 <Math>f:F\to\mathbb K</Math> satisfies <Math>f(1)=0</Math>.
 <P/>If <Math>\theta,\mu\in\mathrm{Coc}_V(F,K)</Math> then the central extensions
 <Math>K\times_\theta F</Math> and <Math>K\times_\mu F</Math> are isomorphic if <Math>\theta</Math> and <Math>\mu</Math> differ by a coboundary,
 that is, <Math>\theta-\mu\in\mathrm{Cob}_V(F,K)</Math>.
 <P/>Finally, the group <Math>G=\mathrm{Aut}(K)\times\mathrm{Aut}(F)</Math> acts on
 the cohomology group <Math>\mathrm{Coc}_V(F,K)/\mathrm{Cob}_V(F,K)</Math> (details ommitted)
 and two central extensions are isomorphic if their cocycles lie in the same orbit of <Math>G</Math>.
 <P/>In &RightQuasigroups;, the elements of <Math>\mathrm{Coc}_V(F,\mathbb Z_p)</Math>
 are represented as vectors of length <Math>|F|^2</Math> with entries in <Math>GF(p)</Math>. (In particular, a cocycle
 from <Math>\mathrm{Coc}_V(F,\mathbb Z_p)</Math> must be transformed into a square matrix to be suitable as an argument
 for <Code>LoopByCentralExtension</Code>.)
<ManSection>
  <Oper Arg="F, p, equationalBasis" Name="LoopCocyclesInVariety" Label="for IsLoop, IsPosInt, IsList"/>
 <Returns>a basis of the vector space of cocycles <Math>\mathrm{Coc}_V(F,\mathbb Z_p)</Math>, where <Arg>F</Arg> is a loop,  <Arg>p</Arg> is a prime and <Math>V</Math> is a variety of loops defined by the list of loop identities
  <Arg>equationalBasis</Arg>. It is checked that all identities of <Arg>equationalBasis</Arg> hold in the
  (multiplicative) cyclic group of order <Arg>p</Arg> and in the loop <Arg>F</Arg>, else en error message is generated.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> F := AsLoop( Group( (1,2), (3,4) ) );; # the Klein group
gap> coc := LoopCocyclesInVariety( F, 2, [ "x*(y*(x*z)) = (x*(y*x))*z" ] );; # basis of left Bol cocycles
gap> Length( coc ); # dimension of the vector space of cocycles
6
gap> theta := coc[3];; Display( theta ); # one cocycle
[ 0*Z(2), 0*Z(2), 0*Z(2), 0*Z(2), 0*Z(2), 0*Z(2), 0*Z(2), 0*Z(2), 0*Z(2), 
Z(2)^0, Z(2)^0, 0*Z(2), 0*Z(2), 0*Z(2), 0*Z(2), 0*Z(2) ]
gap> theta := List( theta, x -> IntFFE( x ) + 1 );; Display( theta ); # converting cocycle entries to [1..Size(K)]
[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1 ]
gap> theta := AsSquareTable( theta );; Display( theta ); # converting cocycle to square table
[ [  1,  1,  1,  1 ],
  [  1,  1,  1,  1 ],
  [  1,  2,  2,  1 ],
  [  1,  1,  1,  1 ] ]
gap> Q := LoopByCentralExtension( AsLoop( CyclicGroup(2) ), F, theta );
<loop of size 8>
gap> IsLeftBolLoop( Q );
true
]]></Example>


<ManSection>
  <Oper Arg="F, p" Name="LoopCoboundaries" Label="for IsLoop, IsPosInt"/>
 <Returns>a basis of the vector space of coboundaries <Math>\mathrm{Cob}_V(F,\mathbb Z_p)</Math>, where <Arg>F</Arg> is a loop  and <Arg>p</Arg> is a prime. Note that <Math>V</Math> is irrelevant here.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="F, p, coc, cob" Name="LoopCocyclesModAction" Label="for IsLoop, IsPosInt, IsList, IsList"/>
 <Returns>Given a loop <Arg>F</Arg>, prime <Arg>p</Arg>, basis <Arg>coc</Arg> of the vector space  <Math>\mathrm{Coc}_V(F,\mathbb Z_p)</Math> and a basis <Arg>cob</Arg> of the vector space 
  <Math>\mathrm{Cob}_V(F,\mathbb Z_p)</Math>, returns a list of cocycles from <Math>\mathrm{Coc}_V(F,\mathbb Z_p)</Math>,
  one from each orbit of <Math>\mathrm{Aut}(\mathbb Z_p)\times\mathrm{Aut}(F)</Math> acting on the cohomology
  group <Math>\mathrm{Coc}_V(F,\mathbb Z_p)/\mathrm{Cob}_V(F,\mathbb Z_p)</Math>. Once the central extensions
  corresponding to the cocycles are constructed, they are guaranteed to contain all central extensions of <Math>\mathbb Z_p</Math> 
  by <Math>\mathbb F</Math> up to isomorphism (with possible duplications).
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="F, p, equationalBasis" Name="AllLoopCocyclesInVariety" Label="for IsLoop, IsPosInt, IsList"/>
 <Returns>Given a loop <Arg>F</Arg>, prime <Arg>p</Arg> and a list of loop identities  <Arg>equationalBasis</Arg> defining a variety <Math>V</Math>, returns a list of cocycles from <Math>\mathrm{Coc}_V(F,\mathbb Z_p)</Math>
  modulo coboundaries and modulo the action described in <Code>LoopCocyclesModAction</Code>.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="F, p, equationalBasis" Name="AllLoopCentralExtensionsInVariety" Label="for IsLoop, IsPosInt, IsList"/>
 <Returns>a list of loops constructed as central extensions of the cyclic group of order <Arg>p</Arg>  by the loop <Arg>F</Arg> via the cocycles obtained by
  <Code>AllLoopCocyclesInVariety( </Code><Arg>F</Arg><Code>, </Code><Arg>p</Arg><Code>, </Code><Arg>equationalBasis</Arg><Code> )</Code>.
  The returned list is guaranteed to contain all central extensions of the cyclic group of order <Arg>p</Arg>
  by the loop <Arg>F</Arg> in the variety of loops defined by the identities <Arg>equationalBasis</Arg>,
  but it might contain duplicate loops of the same isomorphism type. (See <Code>LoopsUpToIsomorphism</Code>.)
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> F := AsLoop( Group( (1,2), (3,4 ) ) );; # Klein group
gap> coc := LoopCocyclesInVariety( F, 2, [ "x*(y*(x*z)) = (x*(y*x))*z" ] );; Length( coc ); # basis of left Bol cocycles
6
gap> cob := LoopCoboundaries( F, 2 );; Length( cob ); # basis of coboundaries
1
gap> Length( LoopCocyclesModAction( F, 2, coc, cob ) ); # cocycles modulo coboundaries and action of Aut(K)x Aut(F)
10
gap> Length( AllLoopCocyclesInVariety( F, 2, [ "x*(y*(x*z)) = (x*(y*x))*z" ] ) ); # the same in one step
#I  RQ: Calculating coboundaries
#I  RQ: Coboundaries have dimension 1
#I  RQ: Calculating cocycles
#I  RQ: Cocycles have dimension 6
10
gap> lps := AllLoopCentralExtensionsInVariety( F, 2, [ "x*(y*(x*z)) = (x*(y*x))*z" ] );; Length( lps ); # all central extensions in one step
#I  RQ: Calculating coboundaries
#I  RQ: Coboundaries have dimension 1
#I  RQ: Calculating cocycles
#I  RQ: Cocycles have dimension 6
10
gap> ForAll( lps, IsLeftBolLoop );
true
gap> Length( LoopsUpToIsomorphism( lps ) ); # filtering up to isomorphism (no isomorphisms in this example)
10
]]></Example>


</Section>


<Section Label="Chapter_Nilpotency_and_solvability_Section_Frattini_subalgebra">
<Heading>Frattini subalgebra</Heading>

 <P/>For a finite algebra <Math>Q</Math> the <Index>Frattini subalgebra</Index><Emph>Frattini subalgebra</Emph> <Math>\Phi(Q)</Math>
 is the intersection of all maximal subalgebras of <Math>Q</Math>. It is precisely the set of
 <Index>non-generator</Index><Emph>non-generators</Emph> of <Math>Q</Math>, i.e., elements <Math>x\in Q</Math> such that
 whenever <Math>Q=\langle S,x\rangle</Math> then <Math>Q=\langle S\rangle</Math>.
 <P/>The Frattini subalgebra might be empty if <Math>Q</Math> is a quasigroup. If <Math>Q</Math> is a loop, the <Math>\Phi(Q)</Math>
 is a subloop of <Math>Q</Math>, the <Index>Frattini subloop</Index><Emph>Frattini subloop</Emph> of <Math>Q</Math>.
 When <Math>Q</Math> is a nilpotent loop, then <Math>\Phi(Q)</Math> is a normal subloop of <Math>Q</Math>. If <Math>Q</Math> is
 a nilpotent <Math>p</Math>-loop then <Math>Q/\Phi(Q)</Math> is isomorphic to a vector space over
 <Math>\mathbb Z_p</Math> whose dimension is the size of a minimal generating subset of <Math>Q</Math>.
 <P/>When <Math>Q</Math> is a loop with nilpotent multiplication group <Math>\mathrm{Mlt}(Q)</Math>, then
 <Math>\Phi(Q)</Math> is the orbit of <Math>\Phi(\mathrm{Mlt}(Q))</Math> containing <Math>1</Math>.
<ManSection>
  <Attr Arg="Q" Name="FrattiniSubrightquasigroup" Label="for IsRightQuasigroup"/>
 <Returns>the Frattini subrightquasigroup (possibly empty) of the right quasigroup <Code>Q</Code>.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="Q" Name="FrattiniSubquasigroup" Label="for IsQuasigroup"/>
 <Returns>the Frattini subquasigroup (possibly empty) of the quasigroup <Code>Q</Code>.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="Q" Name="FrattiniSubloop" Label="for IsLoop"/>
 <Returns>the Frattini subloop of the loop <Code>Q</Code>.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> Q := MoufangLoop(64,5);
MoufangLoop( 64, 5 )
gap> F := FrattiniSubloop(Q);
<Moufang loop of size 8>
gap> Exponent(Q/F);
2
gap> FrattiniSubrightquasigroup( ProjectionRightQuasigroup([1,2]) );
[  ]
]]></Example>


</Section>


</Chapter>

