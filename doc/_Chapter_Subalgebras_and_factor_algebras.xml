<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_Subalgebras_and_factor_algebras">
<Heading>Subalgebras and factor algebras</Heading>

<Section Label="Chapter_Subalgebras_and_factor_algebras_Section_Subalgebras">
<Heading>Subalgebras</Heading>

 <P/>A subset <Math>S</Math> of a right quasigroup <Math>Q</Math> is a <Index>subrightquasigroup</Index>
 <Emph>subrightquasigroup</Emph> of <Math>Q</Math> if it is closed under multiplication and right division.
 A subset <Math>S</Math> of a quasigroup (resp. loop) <Math>Q</Math> is a <Index>subquasigroup</Index> 
 <Emph>subquasigroup</Emph> (resp. <Index>subloop</Index><Emph>subloop</Emph>) if it is closed under
 multiplication and both divisions. In all of the above cases, when <Math>Q</Math> is finite,
 <Math>S</Math> is a subalgebra if it is closed under multiplicaton.
 <P/>In &RightQuasigroups;, if a subalgebra <Code>S</Code> is created from an algebra <Code>Q</Code>,
 the parent of <Code>S</Code> is set to <Code>Q</Code> and the elements of <Code>S</Code> are inherited from <Code>Q</Code>,
 cf. Section <Ref Sect="Section_Parent"/>. If <Code>A</Code>, <Code>B</Code> are two algebras then
 <Code>A</Code> is a subalgebra of <Code>B</Code> iff <Code>Parent( A ) = Parent( B )</Code> and <Code>A</Code> is a subset of <Code>B</Code>.
<ManSection Label="AutoDoc_generated_group20">
<Heading>Testing for subalgebras</Heading>
  <Oper Arg="Q, S" Name="IsSubrightquasigroup" Label="for IsRightQuasigroup, IsRightQuasigroup"/>
  <Oper Arg="Q, S" Name="IsSubquasigroup" Label="for IsQuasigroup, IsQuasigroup"/>
  <Oper Arg="Q, S" Name="IsSubloop" Label="for IsLoop, IsLoop"/>
 <Returns>true if a right quasigroup (quasigroup, loop) <Code>S</Code>  is a subrightquasigroup (subquasigroup, subloop) of a right quasigroup
  (quasigroup, loop) <Code>Q</Code>, else returns <Code>false</Code>. 
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<ManSection Label="AutoDoc_generated_group21">
<Heading>Constructing subalgebras</Heading>
  <Oper Arg="Q, gens" Name="Subrightquasigroup" Label="for IsRightQuasigroup, IsCollection"/>
  <Oper Arg="Q, gens" Name="Subquasigroup" Label="for IsQuasigroup, IsCollection"/>
  <Oper Arg="Q, gens" Name="Subloop" Label="for IsLoop, IsCollection"/>
 <Returns>the subrightquasigoup (subquasigroup, subloop) of a right quasigroup (quasigroup, loop) <Code>Q</Code>  generated by the list of elements <Code>gens</Code>. We allow <Code>gens</Code> to consist of elements of <Code>Q</Code> or 
  of elements of the underlying set of <Code>Q</Code>. Note that there are no optional arguments in this constructor.
  The resulting subalgebra will be index based (cf. Section <Ref Sect="Section_IndexBased"/>) iff
  <Code>Q</Code> is index based.
</Returns>
 <Description>
<P/>
An effort is made for the subalgebra to inherit properties from <Code>Q</Code>. For instance,
 if it is known that <Code>Q</Code> is commutative, the subalgebra will have an attribute that signifies it
 is commutative.
 </Description>
</ManSection>


<Example><![CDATA[
gap> Q := LoopByFunction([0..7],function(x,y) return (x+y) mod 8; end);;
gap> S := Subrightquasigroup( Q, [4] ); # inherits loop property from parent
<loop of size 2>
gap> [ IsSubrightquasigroup( Q, S ), IsSubquasigroup( Q, S ), IsSubloop( Q, S ) ];
[ true, true, true ]
gap> Elements( S ); # note indexing of elements here and below
[ l0, l4 ]
gap> Display( CayleyTable( S ) );
[ [  0,  4 ],
  [  4,  0 ] ]
gap> RightTranslation( Q, Q[4] ); # a permutation of the index set of Q
(1,5)(2,6)(3,7)(4,8)
gap> RightTranslation( S, S[4] ); # a permutation of the index set of S
(1,5)
gap> Subquasigroup( Q, [4] );
<loop of size 2>
gap> Subloop( Q, [4] );
<loop of size 2>
]]></Example>


<ManSection Label="AutoDoc_generated_group22">
<Heading>All subalgebras</Heading>
  <Oper Arg="Q" Name="AllSubrightquasigroups" Label="for IsRightQuasigroup"/>
  <Oper Arg="Q" Name="AllSubquasigroups" Label="for IsQuasigroup"/>
  <Oper Arg="Q" Name="AllSubloops" Label="for IsLoop"/>
 <Returns>a list of all subrightquasigroups (subquasigroups, subloops) of  a right quasigroup (quasigroup, loop) <Code>Q</Code>.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> AllSubloops( AsLoop( SymmetricGroup( 3 ) ) );
[ <loop of size 1>, <loop of size 2>, <loop of size 2>, <loop of size 3>, <loop of size 2>, <loop of size 6> ]
gap> P := ProjectionRightQuasigroup( [1..3] );; 
gap> AllSubrightquasigroups( P ); # every nonempty subset is a subrightquasigroup
[ <right quasigroup of size 1>, <right quasigroup of size 1>, <right quasigroup of size 1>,
  <right quasigroup of size 2>, <right quasigroup of size 2>, <right quasigroup of size 2>,
  <right quasigroup of size 3> ]
]]></Example>


</Section>


<Section Label="Chapter_Subalgebras_and_factor_algebras_Section_Right_cosets_and_transversals">
<Heading>Right cosets and transversals</Heading>

 <P/>If <Math>S</Math> is a subrightquasigroup of a right quasigroup <Math>Q</Math>, the <Index>right cosets</Index>
 <Emph>right cosets</Emph> are subsets of <Math>Q</Math> of the form <Math>Sx</Math>, where <Math>x\in Q</Math>. Note that
 unlike in the case of groups, the right cosets of right quasigroups, quasigroups and loops
 can intersect in nontrivial ways. Moreover, in the case of right quasigroups, the
 right cosets need not cover <Code>Q</Code>.
<P/>
 <P/> A <Index>right transversal</Index><Emph>right transversal</Emph>
 to <Math>S</Math> in <Math>Q</Math> is then a list of elements of <Code>Q</Code> containing one element from each right coset of <Math>S</Math> in <Math>Q</Math>.
 <P/>In &RightQuasigroups;, the right cosets and right transversals are mere lists, 
 not special &GAP; objects.
 <P/>The function <Code>RightCosets( Q, S )</Code> returns a list of all right cosets of <Code>S</Code> in <Code>Q</Code>.
<ManSection>
  <Oper Arg="Q, S" Name="RightTransversal" Label="for IsRightQuasigroup, IsRightQuasigroup"/>
 <Returns>a right transversal to <Code>S</Code> in <Code>Q</Code>.
</Returns>
 <Description>
<P/>
 </Description>
</ManSection>


<Example><![CDATA[
gap> P := ProjectionRightQuasigroup( [1..3] );
<right quasigroup of size 3>
gap> S := Subrightquasigroup( P, [1,2] );
<right quasigroup of size 2>
gap> RightCosets( P, S ); # there is a single right coset of S in P
[ [ r1, r2 ] ]
gap> RightTransversal( P, S );
[ r1 ]
]]></Example>


</Section>


</Chapter>

